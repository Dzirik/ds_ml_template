>>> from src.data.anomaly_detection_sample_data import AnomalyDetectionSampleData, ATTRS
>>> from src.transformations.min_max_scaling_transformer import MinMaxScalingTransformer
>>> from pprint import pprint
>>> from numpy import testing
>>> sample_data = AnomalyDetectionSampleData(abs_values=False, add_zeros=False)
>>> df = sample_data.generate(10, 376)[ATTRS]
>>> data = df.to_numpy()
>>> print(data)
[[ 0.20511322  7.05680286  0.03434261  6.86665557  3.56796902]
 [-0.41325169  1.32186384  0.17279965 -0.37083963  5.82273959]
 [ 1.7595832   2.45609843  0.61351657  2.57891554  4.70323504]
 [ 0.58257803  3.76723388  0.79421325  5.80316721  4.7024014 ]
 [ 1.00193429  1.68935561 -1.20892837  8.76484011  4.15077464]
 [ 1.48632035 -3.60875251 -0.62481971 -1.31762883  5.16495926]
 [-0.63645889  3.17949537 -0.21916252  1.52344215  3.55580977]
 [ 0.56098161  0.93898804 -0.12331346  1.91572646  5.10695345]
 [ 0.12915005  0.71464856 -0.56073867 -0.71693651  5.89857135]
 [-0.90906926 -3.1851148  -0.19427652  0.89173486  5.31828582]]
>>> transformer = MinMaxScalingTransformer()
>>> data_out = transformer.fit_predict(data=data, single_columns=True)
>>> print(data_out)
[[0.41750752 1.         0.62066055 0.81173415 0.00519014]
 [0.18579324 0.46229345 0.6897805  0.0939045  0.96763146]
 [1.         0.56863902 0.90979336 0.38646728 0.48977467]
 [0.5589515  0.69157077 1.         0.70625519 0.48941883]
 [0.71609308 0.49674939 0.         1.         0.25395878]
 [0.89760268 0.         0.29159629 0.         0.68686012]
 [0.10215282 0.63646455 0.49410678 0.28178326 0.        ]
 [0.55085887 0.4263951  0.54195615 0.32069083 0.66210053]
 [0.38904253 0.40536108 0.32358656 0.0595779  1.        ]
 [0.         0.03972017 0.50653026 0.21912923 0.75230705]]
>>> params = transformer.get_params()
>>> pprint(params)
{'data_max_': array([1.7595832 , 7.05680286, 0.79421325, 8.76484011, 5.89857135]),
 'data_min_': array([-0.90906926, -3.60875251, -1.20892837, -1.31762883,  3.55580977]),
 'main_params': {'clip': False, 'copy': True, 'feature_range': (0.0, 1.0)},
 'min_': array([ 0.3406473 ,  0.3383558 ,  0.60351618,  0.13068514, -1.5177856 ]),
 'scale_': array([0.37472095, 0.09375977, 0.49921583, 0.09918206, 0.42684668])}
>>> transformer_restored = MinMaxScalingTransformer()
>>> transformer_restored.restore_from_params(params)
>>> data_out_restored = transformer_restored.predict(data)
>>> print(data_out_restored)
[[0.41750752 1.         0.62066055 0.81173415 0.00519014]
 [0.18579324 0.46229345 0.6897805  0.0939045  0.96763146]
 [1.         0.56863902 0.90979336 0.38646728 0.48977467]
 [0.5589515  0.69157077 1.         0.70625519 0.48941883]
 [0.71609308 0.49674939 0.         1.         0.25395878]
 [0.89760268 0.         0.29159629 0.         0.68686012]
 [0.10215282 0.63646455 0.49410678 0.28178326 0.        ]
 [0.55085887 0.4263951  0.54195615 0.32069083 0.66210053]
 [0.38904253 0.40536108 0.32358656 0.0595779  1.        ]
 [0.         0.03972017 0.50653026 0.21912923 0.75230705]]
>>> transformer = MinMaxScalingTransformer()
>>> data_out = transformer.fit_predict(data=data, single_columns=False)
>>> print(data_out)
[[0.30822622 0.86196109 0.29442501 0.8465939  0.58000306]
 [0.25825166 0.39847896 0.30561473 0.26167929 0.76222746]
 [0.43385425 0.49014471 0.34123227 0.50007045 0.67175216]
 [0.3387319  0.5961071  0.35583568 0.76064568 0.67168479]
 [0.37262313 0.42817864 0.19394724 1.         0.62710382]
 [0.41176989 0.         0.24115331 0.18516237 0.70906745]
 [0.24021266 0.54860768 0.27393742 0.41476997 0.57902038]
 [0.33698654 0.36753599 0.28168368 0.44647332 0.70437958]
 [0.30208709 0.34940548 0.24633216 0.23370868 0.76835598]
 [0.21818104 0.03423724 0.27594863 0.36371711 0.72145888]]